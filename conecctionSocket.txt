/* const http = require('http')

const server = http.createServer()

const io = require('socket.io')(server, {
    cors: { origin: '*' },
})

io.on('connection', (socket) => {
    console.log('se ha conectado un cliente')

    socket.on('chat_message', (data) => {
        io.emit('chat_message', data)
    })
})

server.listen(3000)
 */








 import './App.css'
import { io } from 'socket.io-client'
import { useState, useEffect, useRef } from 'react'

// const socket = io('http://localhost:3000')

function App() {
    const [isConnected, setIsConnected] = useState(false)
    const [newMessage, setNewMessage] = useState('')
    const [messages, setMessages] = useState([])
    const message = useRef(null)

    const logout = () => {
        console.log('se ha cerrado sesi칩n, actualmente est치s offline')
        setIsConnected(false)
    }

    const login = () => {
        console.log('conectado conectamente, actualmente est치s online')
        setIsConnected(true)
    }
    const handleSendMessage = (e) => {
        e.preventDefault()

        const inputValue = message.current.value
        setNewMessage(inputValue)
/* 
        socket.emit('chat_message', {
            usuario: socket.id,
            message: inputValue,
        })
        console.log(inputValue) */
    }

    useEffect(() => {
        // socket.on('connect', () => setIsConnected(false))

        if (!isConnected) return
    }, [logout])

    return (
        <main>
            <h1>{isConnected ? ' ONLINE ' : ' OFFLINE '}</h1>

            <section>
                {/* {<span>{newMessage}</span>} */
                    newMessage.map
                }
            </section>

            <form onSubmit={handleSendMessage}>
                <input type="text" ref={message} />
                <button>Enviar</button>
            </form>
            <button onClick={logout}>Cerrar sesi칩n</button>
            <button onClick={login}>conectar</button>
        </main>
    )
}

export default App
